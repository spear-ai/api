"""All input for the create `Thing` mutation."""
input CreateThingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Thing` to be created by this mutation."""
  thing: ThingInput!
}

"""The output of our create `Thing` mutation."""
type CreateThingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Thing` that was created by this mutation."""
  thing: Thing

  """An edge for our `Thing`. May be used by Relay 1."""
  thingEdge(
    """The method to use when ordering `Thing`."""
    orderBy: [ThingOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ThingEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

"""All input for the `deleteThingById` mutation."""
input DeleteThingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Thing` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Thing` mutation."""
type DeleteThingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedThingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Thing` that was deleted by this mutation."""
  thing: Thing

  """An edge for our `Thing`. May be used by Relay 1."""
  thingEdge(
    """The method to use when ordering `Thing`."""
    orderBy: [ThingOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ThingEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Thing`."""
  createThing(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateThingInput!
  ): CreateThingPayload

  """Deletes a single `Thing` using its globally unique id."""
  deleteThingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteThingByIdInput!
  ): DeleteThingPayload

  """Updates a single `Thing` using its globally unique id and a patch."""
  updateThingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateThingByIdInput!
  ): UpdateThingPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `Thing` using its globally unique `ID`."""
  thingById(
    """The globally unique `ID` to be used in selecting a single `Thing`."""
    id: ID!
  ): Thing

  """Reads and enables pagination through a set of `Thing`."""
  things(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Thing`."""
    orderBy: [ThingOrderBy!] = [PRIMARY_KEY_ASC]
  ): ThingConnection
}

type Thing implements Node {
  createdDatetime: Datetime

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  modifiedDatetime: Datetime
  name: String
}

"""A connection to a list of `Thing` values."""
type ThingConnection {
  """
  A list of edges which contains the `Thing` and cursor to aid in pagination.
  """
  edges: [ThingEdge]!

  """A list of `Thing` objects."""
  nodes: [Thing]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Thing` you could get from the connection."""
  totalCount: Int!
}

"""A `Thing` edge in the connection."""
type ThingEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Thing` at the end of the edge."""
  node: Thing
}

"""An input for mutations affecting `Thing`"""
input ThingInput {
  createdDatetime: Datetime
  modifiedDatetime: Datetime
  name: String
  rowId: UUID
}

"""Methods to use when ordering `Thing`."""
enum ThingOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Thing`. Fields that are set will be updated.
"""
input ThingPatch {
  createdDatetime: Datetime
  modifiedDatetime: Datetime
  name: String
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateThingById` mutation."""
input UpdateThingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Thing` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Thing` being updated.
  """
  thingPatch: ThingPatch!
}

"""The output of our update `Thing` mutation."""
type UpdateThingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Thing` that was updated by this mutation."""
  thing: Thing

  """An edge for our `Thing`. May be used by Relay 1."""
  thingEdge(
    """The method to use when ordering `Thing`."""
    orderBy: [ThingOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ThingEdge
}
